datos_cancer <- data.frame(
edad = edad_cancer,
tamano_tumor = tamano_tumor,
progesterona = progesterona,
sobrevivio = sobrevivio
)
edad_chd <- round(rnorm(n, mean = 60, sd = 8))
colesterol <- round(rnorm(n, mean = 220, sd = 30), 1)
presion <- round(rnorm(n, mean = 135, sd = 15), 1)
log_odds_chd <- -6 + 0.04 * edad_chd + 0.03 * colesterol + 0.02 * presion
prob_chd <- 1 / (1 + exp(-log_odds_chd))
enfermedad_corazon <- rbinom(n, 1, prob_chd)
datos_chd <- data.frame(
edad = edad_chd,
colesterol = colesterol,
presion = presion,
enfermedad = enfermedad_corazon
)
modelo_cancer <- glm(sobrevivio ~ edad + tamano_tumor + progesterona,
data = datos_cancer, family = binomial)
modelo_chd <- glm(enfermedad ~ edad + colesterol + presion,
data = datos_chd, family = binomial)
summary(modelo_cancer)
summary(modelo_chd)
exp(cbind(OR = coef(modelo_cancer), confint(modelo_cancer)))
exp(cbind(OR = coef(modelo_chd), confint(modelo_chd)))
datos_cancer$prob <- predict(modelo_cancer, type = "response")
ggplot(datos_cancer, aes(x = edad, y = prob)) +
geom_point(aes(color = factor(sobrevivio)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Sobrevivir a 5 años vs Edad",
y = "Probabilidad estimada", color = "Sobrevivió") +
theme_minimal()
datos_chd$prob <- predict(modelo_chd, type = "response")
ggplot(datos_chd, aes(x = colesterol, y = prob)) +
geom_point(aes(color = factor(enfermedad)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Enfermedad Coronaria vs Colesterol",
y = "Probabilidad estimada", color = "Enfermedad") +
theme_minimal()
library(pROC)
library(ggplot2)
library(broom)
n <- 1300
age <- round(runif(n, 20, 80))
tumor_size <- round(rnorm(n, 2.5, 1), 1)
marker_A <- round(rnorm(n, 1.0, 0.3), 1)
marker_B <- round(rnorm(n, 1.2, 0.4), 1)
log_odds <- -3.126 + 0.032 * age + 0.732 * tumor_size + 1.348 * marker_A + 0.898 * marker_B
prob <- 1 / (1 + exp(-log_odds))
cancer_type <- rbinom(n, 1, prob)
df <- data.frame(Age = age, TumorSize = tumor_size, MarkerA = marker_A, MarkerB = marker_B, CancerType = cancer_type)
modelo <- glm(CancerType ~ Age + TumorSize + MarkerA + MarkerB, data = df, family = binomial)
modelo
prob_pred <- predict(modelo, type = "response")
roc_obj <- roc(df$CancerType, prob_pred)
png("curva_roc.png", width = 800, height = 600)
plot(roc_obj, col = "blue", lwd = 2, main = "Curva ROC - Modelo cáncer simulado")
abline(a = 0, b = 1, col = "gray", lty = 2)
dev.off()
prob_pred <- predict(modelo, type = "response")
roc_obj <- roc(df$CancerType, prob_pred)
plot(roc_obj, col = "blue", lwd = 2, main = "Curva ROC - Modelo cáncer simulado")
abline(a = 0, b = 1, col = "gray", lty = 2)
ggplot(data.frame(prob = prob_pred), aes(x = prob)) +
geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
labs(title = "Histograma de probabilidades predichas", x = "Probabilidad estimada", y = "Frecuencia")
coef_data <- tidy(modelo, conf.int = TRUE, conf.level = 0.95, exponentiate = TRUE)
coef_data <- coef_data[coef_data$term != "(Intercept)", ]
ggplot(coef_data, aes(x = term, y = estimate, ymin = conf.low, ymax = conf.high)) +
geom_pointrange(color = "darkred") +
geom_hline(yintercept = 1, linetype = "dashed") +
labs(title = "Odds Ratio con IC95%", x = "Variable", y = "OR (exp(β))") +
theme_minimal()
set.seed(123)
n <- 500
edad <- round(runif(n, 25, 80))
tamano_tumor <- round(runif(n, 5, 50))
progesterona <- round(runif(n, 1, 100))
HER2 <- rbinom(n, 1, 0.25)
RE <- rbinom(n, 1, 0.6)
RP <- rbinom(n, 1, 0.55)
densidad_mamaria <- sample(1:4, n, replace = TRUE)
log_odds <- -4 + 0.03 * edad + 0.05 * tamano_tumor - 0.1 * progesterona +
0.8 * HER2 + 0.6 * RE + 0.5 * RP + 0.3 * densidad_mamaria
prob <- 1 / (1 + exp(-log_odds))
diagnostico <- rbinom(n, 1, prob)
datos <- data.frame(edad, tamano_tumor, progesterona,
HER2, RE, RP, densidad_mamaria,
diagnostico)
modelo <- glm(diagnostico ~ ., data = datos, family = binomial)
summary(modelo)
coef_verdaderos <- c(-4, 0.03, 0.05, -0.1, 0.8, 0.6, 0.5, 0.3)
names(coef_verdaderos) <- names(coef(modelo))
comparacion <- data.frame(
Coef_Verdadero = coef_verdaderos,
Coef_Estimado = coef(modelo)
)
print(comparacion)
datos$probabilidad_estimada <- predict(modelo, type = "response")
ggplot(datos, aes(x = edad, y = probabilidad_estimada, color = factor(diagnostico))) +
geom_point(alpha = 0.6) +
stat_function(fun = function(x) 1 / (1 + exp(-(-4 + 0.03 * x + 0.05 * 25 - 0.1 * 50))),
color = "black", linetype = "dashed", size = 1.2) +
labs(title = "Función Sigmoide Estimada vs Real",
x = "Edad", y = "Probabilidad Estimada",
color = "Diagnóstico") +
theme_minimal()
datos$probabilidad_estimada <- predict(modelo, type = "response")
ggplot(datos, aes(x = edad, y = probabilidad_estimada,
color = factor(diagnostico))) +
geom_point(alpha = 0.6) +
stat_function(fun = function(x) 1 / (1 + exp(-(-4 + 0.03 * x + 0.05 * 25 - 0.1 * 50))),
color = "black", linetype = "dashed") +
labs(title = "Función Sigmoide Estimada vs Real",
x = "Edad", y = "Probabilidad Estimada",
color = "Diagnóstico") +
theme_minimal()
write.csv(datos_cancer, "datos_cancer_simulados3.csv", row.names = FALSE)
View(datos_cancer)
head(datos_cancer)
n <- 1000
edad_cancer <- round(rnorm(n, mean = 55, sd = 10))
tamano_tumor <- round(rnorm(n, mean = 30, sd = 10), 1)
progesterona <- round(rnorm(n, mean = 15, sd = 5), 1)
log_odds_cancer <- -4 + 0.03 * edad_cancer + 0.05 * tamano_tumor - 0.1 * progesterona
prob_sobrevida <- 1 / (1 + exp(-log_odds_cancer))
sobrevivio <- rbinom(n, 1, prob_sobrevida)
datos_cancer <- data.frame(
edad = edad_cancer,
tamano_tumor = tamano_tumor,
progesterona = progesterona,
sobrevivio = sobrevivio
)
edad_chd <- round(rnorm(n, mean = 60, sd = 8))
colesterol <- round(rnorm(n, mean = 220, sd = 30), 1)
presion <- round(rnorm(n, mean = 135, sd = 15), 1)
log_odds_chd <- -6 + 0.04 * edad_chd + 0.03 * colesterol + 0.02 * presion
prob_chd <- 1 / (1 + exp(-log_odds_chd))
enfermedad_corazon <- rbinom(n, 1, prob_chd)
datos_chd <- data.frame(
edad = edad_chd,
colesterol = colesterol,
presion = presion,
enfermedad = enfermedad_corazon
)
modelo_cancer <- glm(sobrevivio ~ edad + tamano_tumor + progesterona,
data = datos_cancer, family = binomial)
modelo_chd <- glm(enfermedad ~ edad + colesterol + presion,
data = datos_chd, family = binomial)
summary(modelo_cancer)
summary(modelo_chd)
exp(cbind(OR = coef(modelo_cancer), confint(modelo_cancer)))
exp(cbind(OR = coef(modelo_chd), confint(modelo_chd)))
ggplot(datos_cancer, aes(x = edad, y = prob)) +
geom_point(aes(color = factor(sobrevivio)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Sobrevivir a 5 años vs Edad",
y = "Probabilidad estimada", color = "Sobrevivió") +
theme_minimal()
datos_cancer$prob <- predict(modelo_cancer, type = "response")
ggplot(datos_cancer, aes(x = edad, y = prob)) +
geom_point(aes(color = factor(sobrevivio)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Sobrevivir a 5 años vs Edad",
y = "Probabilidad estimada", color = "Sobrevivió") +
theme_minimal()
datos_chd$prob <- predict(modelo_chd, type = "response")
ggplot(datos_chd, aes(x = colesterol, y = prob)) +
geom_point(aes(color = factor(enfermedad)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Enfermedad Coronaria vs Colesterol",
y = "Probabilidad estimada", color = "Enfermedad") +
theme_minimal()
#---- SEMILLA INICIAL Y LIBRERIAS----
set.seed(123)
library(ggplot2)
# ---- 1. Simulación de datos de cáncer de mama ----
n <- 1000
edad_cancer <- round(rnorm(n, mean = 55, sd = 10))
tamano_tumor <- round(rnorm(n, mean = 30, sd = 10), 1)
progesterona <- round(rnorm(n, mean = 15, sd = 5), 1)
log_odds_cancer <- -4 + 0.03 * edad_cancer + 0.05 * tamano_tumor - 0.1 * progesterona
prob_sobrevida <- 1 / (1 + exp(-log_odds_cancer))
sobrevivio <- rbinom(n, 1, prob_sobrevida)
datos_cancer <- data.frame(
edad = edad_cancer,
tamano_tumor = tamano_tumor,
progesterona = progesterona,
sobrevivio = sobrevivio
)
## ---- Simulación de datos de enfermedad coronaria ----
edad_chd <- round(rnorm(n, mean = 60, sd = 8))
colesterol <- round(rnorm(n, mean = 220, sd = 30), 1)
presion <- round(rnorm(n, mean = 135, sd = 15), 1)
log_odds_chd <- -6 + 0.04 * edad_chd + 0.03 * colesterol + 0.02 * presion
prob_chd <- 1 / (1 + exp(-log_odds_chd))
enfermedad_corazon <- rbinom(n, 1, prob_chd)
datos_chd <- data.frame(
edad = edad_chd,
colesterol = colesterol,
presion = presion,
enfermedad = enfermedad_corazon
)
## ---- Ajuste del modelo logístico ----
modelo_cancer <- glm(sobrevivio ~ edad + tamano_tumor + progesterona,
data = datos_cancer, family = binomial)
modelo_chd <- glm(enfermedad ~ edad + colesterol + presion,
data = datos_chd, family = binomial)
summary(modelo_cancer)
summary(modelo_chd)
## ---- Evaluación: odds ratio e IC 95% ----
exp(cbind(OR = coef(modelo_cancer), confint(modelo_cancer)))
exp(cbind(OR = coef(modelo_chd), confint(modelo_chd)))
## ---- Gráfico de la sigmoide para cáncer (vs. edad) ----
datos_cancer$prob <- predict(modelo_cancer, type = "response")
ggplot(datos_cancer, aes(x = edad, y = prob)) +
geom_point(aes(color = factor(sobrevivio)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Sobrevivir a 5 años vs Edad",
y = "Probabilidad estimada", color = "Sobrevivió") +
theme_minimal()
## ---- Gráfico de la sigmoide para CHD (vs. colesterol) ----
datos_chd$prob <- predict(modelo_chd, type = "response")
ggplot(datos_chd, aes(x = colesterol, y = prob)) +
geom_point(aes(color = factor(enfermedad)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Enfermedad Coronaria vs Colesterol",
y = "Probabilidad estimada", color = "Enfermedad") +
theme_minimal()
#---- 2. Segundo ejemplo de simulacion ----
##---- Librerias ----
library(pROC)
library(ggplot2)
library(broom)
##---- Simulación de datos (igual que antes) ----
set.seed(777)
n <- 1300
age <- round(runif(n, 20, 80))
tumor_size <- round(rnorm(n, 2.5, 1), 1)
marker_A <- round(rnorm(n, 1.0, 0.3), 1)
marker_B <- round(rnorm(n, 1.2, 0.4), 1)
log_odds <- -3.126 + 0.032 * age + 0.732 * tumor_size + 1.348 * marker_A + 0.898 * marker_B
prob <- 1 / (1 + exp(-log_odds))
cancer_type <- rbinom(n, 1, prob)
df <- data.frame(Age = age, TumorSize = tumor_size, MarkerA = marker_A, MarkerB = marker_B, CancerType = cancer_type)
##---- Modelo ----
modelo <- glm(CancerType ~ Age + TumorSize + MarkerA + MarkerB, data = df, family = binomial)
##---- Gráfico 1: Curva ROC ----
prob_pred <- predict(modelo, type = "response")
roc_obj <- roc(df$CancerType, prob_pred)
plot(roc_obj, col = "blue", lwd = 2, main = "Curva ROC - Modelo cáncer simulado")
abline(a = 0, b = 1, col = "gray", lty = 2)
##---- Gráfico 2: Histograma de probabilidades predichas ----
ggplot(data.frame(prob = prob_pred), aes(x = prob)) +
geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
labs(title = "Histograma de probabilidades predichas", x = "Probabilidad estimada", y = "Frecuencia")
##---- Gráfico 3: Efectos de los coeficientes con IC95% ----
coef_data <- tidy(modelo, conf.int = TRUE, conf.level = 0.95, exponentiate = TRUE)
coef_data <- coef_data[coef_data$term != "(Intercept)", ]
ggplot(coef_data, aes(x = term, y = estimate, ymin = conf.low, ymax = conf.high)) +
geom_pointrange(color = "darkred") +
geom_hline(yintercept = 1, linetype = "dashed") +
labs(title = "Odds Ratio con IC95%", x = "Variable", y = "OR (exp(β))") +
theme_minimal()
#---- 3. NUEVO EJERCICIO DE SIMULACION ----
##---- INICIALIZACION DE VARIABLES ----
set.seed(123)
n <- 500
edad <- round(runif(n, 25, 80))
tamano_tumor <- round(runif(n, 5, 50))
progesterona <- round(runif(n, 1, 100))
HER2 <- rbinom(n, 1, 0.25)
RE <- rbinom(n, 1, 0.6)
RP <- rbinom(n, 1, 0.55)
densidad_mamaria <- sample(1:4, n, replace = TRUE)
##---- Coeficientes simulados----
log_odds <- -4 + 0.03 * edad + 0.05 * tamano_tumor - 0.1 * progesterona +
0.8 * HER2 + 0.6 * RE + 0.5 * RP + 0.3 * densidad_mamaria
##---- Probabilidad y diagnóstico ----
prob <- 1 / (1 + exp(-log_odds))
diagnostico <- rbinom(n, 1, prob)
##---- Base de datos ----
datos <- data.frame(edad, tamano_tumor, progesterona,
HER2, RE, RP, densidad_mamaria,
diagnostico)
##----Modelo de regresión logística (MLE) ----
modelo <- glm(diagnostico ~ ., data = datos, family = binomial)
summary(modelo)
##---- Comparar coeficientes verdaderos vs estimados----
coef_verdaderos <- c(-4, 0.03, 0.05, -0.1, 0.8, 0.6, 0.5, 0.3)
names(coef_verdaderos) <- names(coef(modelo))
comparacion <- data.frame(
Coef_Verdadero = coef_verdaderos,
Coef_Estimado = coef(modelo)
)
print(comparacion)
##---- Visualizar con función sigmoide ----
datos$probabilidad_estimada <- predict(modelo, type = "response")
ggplot(datos, aes(x = edad, y = probabilidad_estimada,
color = factor(diagnostico))) +
geom_point(alpha = 0.6) +
stat_function(fun = function(x) 1 / (1 + exp(-(-4 + 0.03 * x + 0.05 * 25 - 0.1 * 50))),
color = "black", linetype = "dashed") +
labs(title = "Función Sigmoide Estimada vs Real",
x = "Edad", y = "Probabilidad Estimada",
color = "Diagnóstico") +
theme_minimal()
write.csv(datos_cancer, "datos_cancer_simulados3.csv", row.names = FALSE)
View(datos_cancer)
head(datos_cancer)
#---- 4. Simulación y Análisis de Regresión Logística ----
set.seed(123)
library(ggplot2)
##---- Simulación de datos de cáncer de mama ----
n <- 1000
edad_cancer <- round(rnorm(n, mean = 55, sd = 10))
tamano_tumor <- round(rnorm(n, mean = 30, sd = 10), 1)
progesterona <- round(rnorm(n, mean = 15, sd = 5), 1)
log_odds_cancer <- -4 + 0.03 * edad_cancer + 0.05 * tamano_tumor - 0.1 * progesterona
prob_sobrevida <- 1 / (1 + exp(-log_odds_cancer))
sobrevivio <- rbinom(n, 1, prob_sobrevida)
datos_cancer <- data.frame(
edad = edad_cancer,
tamano_tumor = tamano_tumor,
progesterona = progesterona,
sobrevivio = sobrevivio
)
## ---- Simulación de datos de enfermedad coronaria ----
edad_chd <- round(rnorm(n, mean = 60, sd = 8))
colesterol <- round(rnorm(n, mean = 220, sd = 30), 1)
presion <- round(rnorm(n, mean = 135, sd = 15), 1)
log_odds_chd <- -6 + 0.04 * edad_chd + 0.03 * colesterol + 0.02 * presion
prob_chd <- 1 / (1 + exp(-log_odds_chd))
enfermedad_corazon <- rbinom(n, 1, prob_chd)
datos_chd <- data.frame(
edad = edad_chd,
colesterol = colesterol,
presion = presion,
enfermedad = enfermedad_corazon
)
##---- Ajuste del modelo logístico ----
modelo_cancer <- glm(sobrevivio ~ edad + tamano_tumor + progesterona,
data = datos_cancer, family = binomial)
modelo_chd <- glm(enfermedad ~ edad + colesterol + presion,
data = datos_chd, family = binomial)
summary(modelo_cancer)
summary(modelo_chd)
## ---- Evaluación: odds ratio e IC 95% ----
exp(cbind(OR = coef(modelo_cancer), confint(modelo_cancer)))
exp(cbind(OR = coef(modelo_chd), confint(modelo_chd)))
## ---- Gráfico de la sigmoide para cáncer (vs. edad) ----
datos_cancer$prob <- predict(modelo_cancer, type = "response")
ggplot(datos_cancer, aes(x = edad, y = prob)) +
geom_point(aes(color = factor(sobrevivio)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Sobrevivir a 5 años vs Edad",
y = "Probabilidad estimada", color = "Sobrevivió") +
theme_minimal()
## ---- Gráfico de la sigmoide para CHD (vs. colesterol) ----
datos_chd$prob <- predict(modelo_chd, type = "response")
ggplot(datos_chd, aes(x = colesterol, y = prob)) +
geom_point(aes(color = factor(enfermedad)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Enfermedad Coronaria vs Colesterol",
y = "Probabilidad estimada", color = "Enfermedad") +
theme_minimal()
#---- 5. Optimización vía Gradientes Conjugados (Logística) ----
# Función sigmoide
sigmoid <- function(z) {
1 / (1 + exp(-z))
}
# Gradiente de la función de log-verosimilitud
gradient <- function(X, y, beta) {
p <- sigmoid(X %*% beta)
t(X) %*% (p - y)
}
# Producto Hessiano aproximado
hessian_approx <- function(X, beta) {
p <- sigmoid(X %*% beta)
W <- diag(as.vector(p * (1 - p)))
t(X) %*% W %*% X
}
# Método de gradiente conjugado (versión simplificada)
conjugate_gradient <- function(X, y, tol = 1e-6, max_iter = 1000) {
beta <- matrix(0, ncol(X), 1)
r <- -gradient(X, y, beta)
d <- r
iter <- 0
while (sqrt(sum(r^2)) > tol && iter < max_iter) {
Hd <- hessian_approx(X, beta) %*% d
alpha <- as.numeric(t(r) %*% r / (t(d) %*% Hd))
beta <- beta + alpha * d
r_new <- r - alpha * Hd
beta_new <- beta
if (sqrt(sum(r_new^2)) < tol) break
beta <- beta_new
beta_new <- NULL
beta_r <- t(r_new) %*% r_new / t(r) %*% r
d <- r_new + as.numeric(beta_r) * d
r <- r_new
iter <- iter + 1
}
return(list(beta = beta, iter = iter))
}
# Aplicación a los datos simulados de cáncer
X_cancer <- as.matrix(cbind(1, cancer$age, cancer$size))
set.seed(123)
library(ggplot2)
##---- Simulación de datos de cáncer de mama ----
n <- 1000
edad_cancer <- round(rnorm(n, mean = 55, sd = 10))
tamano_tumor <- round(rnorm(n, mean = 30, sd = 10), 1)
progesterona <- round(rnorm(n, mean = 15, sd = 5), 1)
log_odds_cancer <- -4 + 0.03 * edad_cancer + 0.05 * tamano_tumor - 0.1 * progesterona
prob_sobrevida <- 1 / (1 + exp(-log_odds_cancer))
sobrevivio <- rbinom(n, 1, prob_sobrevida)
datos_cancer <- data.frame(
edad = edad_cancer,
tamano_tumor = tamano_tumor,
progesterona = progesterona,
sobrevivio = sobrevivio
)
## ---- Simulación de datos de enfermedad coronaria ----
edad_chd <- round(rnorm(n, mean = 60, sd = 8))
colesterol <- round(rnorm(n, mean = 220, sd = 30), 1)
presion <- round(rnorm(n, mean = 135, sd = 15), 1)
log_odds_chd <- -6 + 0.04 * edad_chd + 0.03 * colesterol + 0.02 * presion
prob_chd <- 1 / (1 + exp(-log_odds_chd))
enfermedad_corazon <- rbinom(n, 1, prob_chd)
datos_chd <- data.frame(
edad = edad_chd,
colesterol = colesterol,
presion = presion,
enfermedad = enfermedad_corazon
)
##---- Ajuste del modelo logístico ----
modelo_cancer <- glm(sobrevivio ~ edad + tamano_tumor + progesterona,
data = datos_cancer, family = binomial)
modelo_chd <- glm(enfermedad ~ edad + colesterol + presion,
data = datos_chd, family = binomial)
summary(modelo_cancer)
summary(modelo_chd)
## ---- Evaluación: odds ratio e IC 95% ----
exp(cbind(OR = coef(modelo_cancer), confint(modelo_cancer)))
exp(cbind(OR = coef(modelo_chd), confint(modelo_chd)))
## ---- Gráfico de la sigmoide para cáncer (vs. edad) ----
datos_cancer$prob <- predict(modelo_cancer, type = "response")
ggplot(datos_cancer, aes(x = edad, y = prob)) +
geom_point(aes(color = factor(sobrevivio)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Sobrevivir a 5 años vs Edad",
y = "Probabilidad estimada", color = "Sobrevivió") +
theme_minimal()
## ---- Gráfico de la sigmoide para CHD (vs. colesterol) ----
datos_chd$prob <- predict(modelo_chd, type = "response")
ggplot(datos_chd, aes(x = colesterol, y = prob)) +
geom_point(aes(color = factor(enfermedad)), alpha = 0.5) +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Probabilidad de Enfermedad Coronaria vs Colesterol",
y = "Probabilidad estimada", color = "Enfermedad") +
theme_minimal()
#---- 5. Optimización vía Gradientes Conjugados (Logística) ----
##---- Función sigmoide ----
sigmoid <- function(z) {
1 / (1 + exp(-z))
}
##---- Gradiente de la función de log-verosimilitud ----
gradient <- function(X, y, beta) {
p <- sigmoid(X %*% beta)
t(X) %*% (p - y)
}
##---- Producto Hessiano aproximado ----
hessian_approx <- function(X, beta) {
p <- sigmoid(X %*% beta)
W <- diag(as.vector(p * (1 - p)))
t(X) %*% W %*% X
}
##---- Método de gradiente conjugado (versión simplificada) ----
conjugate_gradient <- function(X, y, tol = 1e-6, max_iter = 1000) {
beta <- matrix(0, ncol(X), 1)
r <- -gradient(X, y, beta)
d <- r
iter <- 0
while (sqrt(sum(r^2)) > tol && iter < max_iter) {
Hd <- hessian_approx(X, beta) %*% d
alpha <- as.numeric(t(r) %*% r / (t(d) %*% Hd))
beta <- beta + alpha * d
r_new <- r - alpha * Hd
beta_new <- beta
if (sqrt(sum(r_new^2)) < tol) break
beta <- beta_new
beta_new <- NULL
beta_r <- t(r_new) %*% r_new / t(r) %*% r
d <- r_new + as.numeric(beta_r) * d
r <- r_new
iter <- iter + 1
}
return(list(beta = beta, iter = iter))
}
##---- Aplicación a los datos simulados de cáncer ----
X_cancer <- as.matrix(cbind(1, cancer$age, cancer$size))
X_cancer <- as.matrix(cbind(1, datos_cancer$edad, datos_cancer$tamano_tumor))
y_cancer <- as.matrix(datos_cancer$sobrevivio)
cg_cancer <- conjugate_gradient(X_cancer, y_cancer)
print("Coeficientes estimados (cáncer):")
print(cg_cancer$beta)
X_chd <- as.matrix(cbind(1, datos_chd$edad, datos_chd$colesterol))
y_chd <- as.matrix(datos_chd$enfermedad)
cg_chd <- conjugate_gradient(X_chd, y_chd)
print("Coeficientes estimados (CHD):")
print(cg_chd$beta)
